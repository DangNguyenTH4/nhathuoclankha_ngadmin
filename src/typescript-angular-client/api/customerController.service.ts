/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional, SkipSelf }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { CustomerDto } from '../model/customerDto';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { environment } from '../../environments/environment';
import { MedicineDto } from '../model/models';


@Injectable({
    providedIn: "root"
  })
export class CustomerControllerService {
    

    protected basePath = environment.host;
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * findCustomerByPhone
     * 
     * @param phone phone
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findCustomerByPhoneUsingGET(phone: string, observe?: 'body', reportProgress?: boolean): Observable<CustomerDto>;
    public findCustomerByPhoneUsingGET(phone: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CustomerDto>>;
    public findCustomerByPhoneUsingGET(phone: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CustomerDto>>;
    public findCustomerByPhoneUsingGET(phone: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (phone === null || phone === undefined) {
            throw new Error('Required parameter phone was null or undefined when calling findCustomerByPhoneUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (phone !== undefined && phone !== null) {
            queryParameters = queryParameters.set('phone', <any>phone);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<CustomerDto>(`${this.basePath}/customer/findByPhone`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getListPhone
     * 
     * @param phone phone
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getListPhone(phone: string, observe?: 'body', reportProgress?: boolean): Observable<string[]>;
    public getListPhone(phone: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public getListPhone(phone: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public getListPhone(phone: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (phone === null || phone === undefined) {
            throw new Error('Required parameter phone was null or undefined when calling findCustomerByPhoneUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (phone !== undefined && phone !== null) {
            queryParameters = queryParameters.set('phone', <any>phone);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<string>(`${this.basePath}/customer/list-phone`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getListName
     * 
     * @param phone phone
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getListName(name: string, observe?: 'body', reportProgress?: boolean): Observable<string[]>;
    public getListName(name: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public getListName(name: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public getListName(name: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (name === null || name === undefined) {
            throw new Error('Required parameter phone was null or undefined when calling findCustomerByPhoneUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('name', <any>name);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<string>(`${this.basePath}/customer/list-name`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getListFarmName
     * 
     * @param phone phone
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getListFarmName(name: string, observe?: 'body', reportProgress?: boolean): Observable<string[]>;
    public getListFarmName(name: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public getListFarmName(name: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public getListFarmName(name: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (name === null || name === undefined) {
            throw new Error('Required parameter phone was null or undefined when calling findCustomerByPhoneUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('name', <any>name);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<string>(`${this.basePath}/customer/list-farm-name`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }
    /**
     * getCustomerByPhone
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCustomerByPhone2UsingGET(phone: string, observe?: 'body', reportProgress?: boolean): Observable<CustomerDto>;
    public getCustomerByPhone2UsingGET(phone: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CustomerDto>>;
    public getCustomerByPhone2UsingGET(phone: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CustomerDto>>;
    public getCustomerByPhone2UsingGET(phone: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (phone === null || phone === undefined) {
            throw new Error('Required parameter phone was null or undefined when calling findCustomerByPhoneUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (phone !== undefined && phone !== null) {
            queryParameters = queryParameters.set('phone', <any>phone);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<CustomerDto>(`${this.basePath}/customer/get-customer`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getCustomerByPhone
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getListBougthByPhoneUsingGet(phone: string, observe?: 'body', reportProgress?: boolean): Observable<MedicineDto[]>;
    public getListBougthByPhoneUsingGet(phone: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<MedicineDto[]>>;
    public getListBougthByPhoneUsingGet(phone: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<MedicineDto[]>>;
    public getListBougthByPhoneUsingGet(phone: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (phone === null || phone === undefined) {
            throw new Error('Required parameter phone was null or undefined when calling findCustomerByPhoneUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (phone !== undefined && phone !== null) {
            queryParameters = queryParameters.set('phone', <any>phone);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<MedicineDto[]>(`${this.basePath}/customer/get-list-bought`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }


    /**
     * findLikeCustomerLikePhone
     * 
     * @param phone phone
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findLikeCustomerLikePhoneUsingGET(phone: string, observe?: 'body', reportProgress?: boolean): Observable<Array<CustomerDto>>;
    public findLikeCustomerLikePhoneUsingGET(phone: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CustomerDto>>>;
    public findLikeCustomerLikePhoneUsingGET(phone: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CustomerDto>>>;
    public findLikeCustomerLikePhoneUsingGET(phone: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (phone === null || phone === undefined) {
            throw new Error('Required parameter phone was null or undefined when calling findLikeCustomerLikePhoneUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (phone !== undefined && phone !== null) {
            queryParameters = queryParameters.set('phone', <any>phone);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<CustomerDto>>(`${this.basePath}/customer/findLikePhone`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
